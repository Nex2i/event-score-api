generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// If a full DB reset needs to happen, you will need to delete the stored data types
enum USER_TYPE {
  GUEST
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  ONBOARDING
  DELINQUENT
}

model Company {
  id             String  @id @default(uuid())
  name           String
  streetAddress1 String  @default("")
  streetAddress2 String?
  city           String  @default("")
  state          String  @default("")
  zip            String  @default("")

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  events         Event[]
  User           User[]
  CompanyPayment CompanyPayment[]
}

model CompanyPayment {
  id                String        @id @default(uuid())
  companyId         String
  externalPaymentId String        @unique
  accountStatus     AccountStatus @default(ONBOARDING)
  status            PaymentStatus @default(PENDING)

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  Company Company @relation(fields: [companyId], references: [id])
}

model Event {
  id        String    @id @default(uuid())
  name      String
  startDate DateTime?
  endDate   DateTime?

  companyId String

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  Courses Course[]
  Company Company       @relation(fields: [companyId], references: [id])
  QRScan  EventQRScan[]
}

model Course {
  id   String @id @default(uuid())
  name String

  eventId String

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  Targets           Target[]
  Event             Event              @relation(fields: [eventId], references: [id])
  UserCourseRecords UserCourseRecord[]
}

model Target {
  id         String @id @default(uuid())
  name       String @default("")
  distance   Int    @default(0)
  orderIndex Int    @default(0)

  courseId     String
  targetTypeId String

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  TargetType TargetType @relation(fields: [targetTypeId], references: [id])
  Course     Course     @relation(fields: [courseId], references: [id])
  Shots      Shot[]
  UserShot   UserShot[]
}

model Shot {
  id         String @id @default(uuid())
  orderIndex Int    @default(0)

  targetId String

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  Target    Target     @relation(fields: [targetId], references: [id])
  UserShots UserShot[]
}

model TargetType {
  id         String  @id @default(uuid())
  isTemplate Boolean @default(false)

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  Targets         Target[]
  TargetTypeRings TargetTypeRing[]
}

model TargetTypeRing {
  id         String @id @default(uuid())
  color      String @default("#808080")
  value      Int    @default(0)
  orderIndex Int    @default(0)

  targetTypeId String

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  TargetType TargetType @relation(fields: [targetTypeId], references: [id])
}

model User {
  id        String    @id @default(uuid())
  type      USER_TYPE @default(GUEST)
  companyId String

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  UserShots         UserShot[]
  UserCourseRecords UserCourseRecord[]
  UserAuth          UserAuth[]
  Company           Company            @relation(fields: [companyId], references: [id])
}

model UserAuth {
  id             String  @id @default(uuid())
  userId         String  @unique
  email          String  @unique
  phoneNumber    String?
  hashedPassword String

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  User User @relation(fields: [userId], references: [id])

  @@index([email])
}

model UserShot {
  id       String @id @default(uuid())
  userId   String
  shotId   String
  targetId String
  score    Int

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  Target Target @relation(fields: [targetId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
  Shot   Shot   @relation(fields: [shotId], references: [id])

  @@unique([userId, shotId])
}

model UserCourseRecord {
  id         String @id @default(uuid())
  totalScore Int
  username   String

  userId   String
  courseId String

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  User   User   @relation(fields: [userId], references: [id])
  Course Course @relation(fields: [courseId], references: [id])
}

model EventQRScan {
  id        String @id @default(uuid())
  ipAddress String

  eventId String

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt

  event Event @relation(fields: [eventId], references: [id])
}
