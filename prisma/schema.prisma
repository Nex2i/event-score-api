generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(uuid())
  name        String
  dateCreated DateTime
  dateUpdated DateTime

  events Event[]
}

model Event {
  id          String    @id @default(uuid())
  name        String
  companyId   String
  startDate   DateTime?
  endDate     DateTime?
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now())

  Courses Course[]
  Company Company  @relation(fields: [companyId], references: [id])
}

model Course {
  id          String   @id @default(uuid())
  name        String
  eventId     String
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now())

  Targets           Target[]
  Event             Event              @relation(fields: [eventId], references: [id])
  UserCourseRecords UserCourseRecord[]
}

model Target {
  id           String   @id @default(uuid())
  courseId     String
  targetTypeId String
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now())

  Shots      Shot[]
  TargetType TargetType @relation(fields: [targetTypeId], references: [id])
  Course     Course     @relation(fields: [courseId], references: [id])
  UserShot   UserShot[]
}

model Shot {
  id          String   @id @default(uuid())
  targetId    String
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now())

  Target    Target     @relation(fields: [targetId], references: [id])
  UserShots UserShot[]
}

model TargetType {
  id          String   @id @default(uuid())
  isTemplate  Boolean  @default(false)
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now())

  Targets         Target[]
  TargetTypeRings TargetTypeRing[]
}

model TargetTypeRing {
  id           String @id @default(uuid())
  targetTypeId String

  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now())

  TargetType TargetType @relation(fields: [targetTypeId], references: [id])
}

model User {
  id                String             @id @default(uuid())
  type              String
  dateCreated       DateTime           @default(now())
  dateUpdated       DateTime           @default(now())
  UserShots         UserShot[]
  UserCourseRecords UserCourseRecord[]
}

model UserShot {
  id          String   @id @default(uuid())
  userId      String
  shotId      String
  targetId    String
  score       Int
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now())

  Target Target @relation(fields: [targetId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
  Shot   Shot   @relation(fields: [shotId], references: [id])
}

model UserCourseRecord {
  id          String   @id @default(uuid())
  userId      String
  courseId    String
  totalScore  Int
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now())

  User   User   @relation(fields: [userId], references: [id])
  Course Course @relation(fields: [courseId], references: [id])
}
